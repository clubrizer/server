name: Plan Infrastructure

on:
  pull_request:
    branches:
      - main



jobs:
  plan:
    name: Plan Infrastructure
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./.iac
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        continue-on-error: true

      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
#
#  plan:
#    name: Plan
#    runs-on: ubuntu-20.04
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v2
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_version: 1.2.9
#
#      # TODO - somehow pass google credentials to Terraform (e.g. see https://medium.com/interleap/automating-terraform-deployment-to-google-cloud-with-github-actions-17516c4fb2e5)
#      - name: Configure GCP Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-region: us-east-1
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Initialize Terraform
#        run: |
#          cd .iac
#          terraform init -input=false
#
#      - name: Plan Terraform
#        id: plan
#        continue-on-error: true
#        run: |
#          cd .iac
#          terraform plan -input=false -no-color -out=tfplan && terraform show -no-color tfplan
#
#      - name: Reformat Plan
#        run: |
#          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
#          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt
#
#      - name: Put Plan in Env Var
#        run: |
#          PLAN=$(cat plan.txt)
#          echo "PLAN<<EOF" >> $GITHUB_ENV
#          echo "$PLAN" >> $GITHUB_ENV
#          echo "EOF" >> $GITHUB_ENV
#
##      - name: Post Plan to GitHub PR
##        uses: mshick/add-pr-comment@v1
##        with:
##          allow-repeats: true
##          repo-token: ${{ secrets.GITHUB_TOKEN }}
##          repo-token-user-login: 'github-actions[bot]'
##          message: |
##            ## Terraform plan
##            ```diff
##            ${{ env.PLAN }}
#            ```
#      - name: Post Plan to GitHub PR
#        uses: actions/github-script@v5
#        with:
#          github-token: ${{secrets.GITHUB_TOKEN}}
#          script: |
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: '```diff\n${{ env.PLAN }}\n```'
#            })