// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// TokenHandler is an autogenerated mock type for the tokenHandler type
type TokenHandler struct {
	mock.Mock
}

type TokenHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenHandler) EXPECT() *TokenHandler_Expecter {
	return &TokenHandler_Expecter{mock: &_m.Mock}
}

// RefreshTokens provides a mock function with given fields:
func (_m *TokenHandler) RefreshTokens() func(http.ResponseWriter, *http.Request) {
	ret := _m.Called()

	var r0 func(http.ResponseWriter, *http.Request)
	if rf, ok := ret.Get(0).(func() func(http.ResponseWriter, *http.Request)); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(http.ResponseWriter, *http.Request))
		}
	}

	return r0
}

// TokenHandler_RefreshTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshTokens'
type TokenHandler_RefreshTokens_Call struct {
	*mock.Call
}

// RefreshTokens is a helper method to define mock.On call
func (_e *TokenHandler_Expecter) RefreshTokens() *TokenHandler_RefreshTokens_Call {
	return &TokenHandler_RefreshTokens_Call{Call: _e.mock.On("RefreshTokens")}
}

func (_c *TokenHandler_RefreshTokens_Call) Run(run func()) *TokenHandler_RefreshTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TokenHandler_RefreshTokens_Call) Return(_a0 func(http.ResponseWriter, *http.Request)) *TokenHandler_RefreshTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

// ValidateAccessToken provides a mock function with given fields:
func (_m *TokenHandler) ValidateAccessToken() func(http.ResponseWriter, *http.Request) {
	ret := _m.Called()

	var r0 func(http.ResponseWriter, *http.Request)
	if rf, ok := ret.Get(0).(func() func(http.ResponseWriter, *http.Request)); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(http.ResponseWriter, *http.Request))
		}
	}

	return r0
}

// TokenHandler_ValidateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccessToken'
type TokenHandler_ValidateAccessToken_Call struct {
	*mock.Call
}

// ValidateAccessToken is a helper method to define mock.On call
func (_e *TokenHandler_Expecter) ValidateAccessToken() *TokenHandler_ValidateAccessToken_Call {
	return &TokenHandler_ValidateAccessToken_Call{Call: _e.mock.On("ValidateAccessToken")}
}

func (_c *TokenHandler_ValidateAccessToken_Call) Run(run func()) *TokenHandler_ValidateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TokenHandler_ValidateAccessToken_Call) Return(_a0 func(http.ResponseWriter, *http.Request)) *TokenHandler_ValidateAccessToken_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTokenHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenHandler creates a new instance of TokenHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenHandler(t mockConstructorTestingTNewTokenHandler) *TokenHandler {
	mock := &TokenHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
