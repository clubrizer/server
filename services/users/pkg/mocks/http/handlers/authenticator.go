// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	clubrizer "github.com/clubrizer/services/users/internal/authenticator/clubrizer"
	google "github.com/clubrizer/services/users/internal/authenticator/google"

	mock "github.com/stretchr/testify/mock"
)

// Authenticator is an autogenerated mock type for the authenticator type
type Authenticator struct {
	mock.Mock
}

type Authenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *Authenticator) EXPECT() *Authenticator_Expecter {
	return &Authenticator_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: user
func (_m *Authenticator) Authenticate(user *google.User) (*clubrizer.User, error) {
	ret := _m.Called(user)

	var r0 *clubrizer.User
	if rf, ok := ret.Get(0).(func(*google.User) *clubrizer.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clubrizer.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*google.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authenticator_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type Authenticator_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - user *google.User
func (_e *Authenticator_Expecter) Authenticate(user interface{}) *Authenticator_Authenticate_Call {
	return &Authenticator_Authenticate_Call{Call: _e.mock.On("Authenticate", user)}
}

func (_c *Authenticator_Authenticate_Call) Run(run func(user *google.User)) *Authenticator_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*google.User))
	})
	return _c
}

func (_c *Authenticator_Authenticate_Call) Return(_a0 *clubrizer.User, _a1 error) *Authenticator_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewAuthenticator interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthenticator creates a new instance of Authenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthenticator(t mockConstructorTestingTNewAuthenticator) *Authenticator {
	mock := &Authenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
