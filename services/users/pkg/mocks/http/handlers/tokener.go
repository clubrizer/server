// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	clubrizer "github.com/clubrizer/services/users/internal/authenticator/clubrizer"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Tokener is an autogenerated mock type for the tokener type
type Tokener struct {
	mock.Mock
}

type Tokener_Expecter struct {
	mock *mock.Mock
}

func (_m *Tokener) EXPECT() *Tokener_Expecter {
	return &Tokener_Expecter{mock: &_m.Mock}
}

// GenerateAccessToken provides a mock function with given fields: user
func (_m *Tokener) GenerateAccessToken(user *clubrizer.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(*clubrizer.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clubrizer.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tokener_GenerateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessToken'
type Tokener_GenerateAccessToken_Call struct {
	*mock.Call
}

// GenerateAccessToken is a helper method to define mock.On call
//   - user *clubrizer.User
func (_e *Tokener_Expecter) GenerateAccessToken(user interface{}) *Tokener_GenerateAccessToken_Call {
	return &Tokener_GenerateAccessToken_Call{Call: _e.mock.On("GenerateAccessToken", user)}
}

func (_c *Tokener_GenerateAccessToken_Call) Run(run func(user *clubrizer.User)) *Tokener_GenerateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*clubrizer.User))
	})
	return _c
}

func (_c *Tokener_GenerateAccessToken_Call) Return(_a0 string, _a1 error) *Tokener_GenerateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GenerateRefreshToken provides a mock function with given fields: user
func (_m *Tokener) GenerateRefreshToken(user *clubrizer.User) (string, time.Time, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(*clubrizer.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(*clubrizer.User) time.Time); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*clubrizer.User) error); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Tokener_GenerateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRefreshToken'
type Tokener_GenerateRefreshToken_Call struct {
	*mock.Call
}

// GenerateRefreshToken is a helper method to define mock.On call
//   - user *clubrizer.User
func (_e *Tokener_Expecter) GenerateRefreshToken(user interface{}) *Tokener_GenerateRefreshToken_Call {
	return &Tokener_GenerateRefreshToken_Call{Call: _e.mock.On("GenerateRefreshToken", user)}
}

func (_c *Tokener_GenerateRefreshToken_Call) Run(run func(user *clubrizer.User)) *Tokener_GenerateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*clubrizer.User))
	})
	return _c
}

func (_c *Tokener_GenerateRefreshToken_Call) Return(_a0 string, _a1 time.Time, _a2 error) *Tokener_GenerateRefreshToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// ValidateAccessToken provides a mock function with given fields: tokenString
func (_m *Tokener) ValidateAccessToken(tokenString string) error {
	ret := _m.Called(tokenString)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tokener_ValidateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccessToken'
type Tokener_ValidateAccessToken_Call struct {
	*mock.Call
}

// ValidateAccessToken is a helper method to define mock.On call
//   - tokenString string
func (_e *Tokener_Expecter) ValidateAccessToken(tokenString interface{}) *Tokener_ValidateAccessToken_Call {
	return &Tokener_ValidateAccessToken_Call{Call: _e.mock.On("ValidateAccessToken", tokenString)}
}

func (_c *Tokener_ValidateAccessToken_Call) Run(run func(tokenString string)) *Tokener_ValidateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Tokener_ValidateAccessToken_Call) Return(_a0 error) *Tokener_ValidateAccessToken_Call {
	_c.Call.Return(_a0)
	return _c
}

// ValidateRefreshTokenAndGetUserID provides a mock function with given fields: tokenString
func (_m *Tokener) ValidateRefreshTokenAndGetUserID(tokenString string) (int64, error) {
	ret := _m.Called(tokenString)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tokener_ValidateRefreshTokenAndGetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRefreshTokenAndGetUserID'
type Tokener_ValidateRefreshTokenAndGetUserID_Call struct {
	*mock.Call
}

// ValidateRefreshTokenAndGetUserID is a helper method to define mock.On call
//   - tokenString string
func (_e *Tokener_Expecter) ValidateRefreshTokenAndGetUserID(tokenString interface{}) *Tokener_ValidateRefreshTokenAndGetUserID_Call {
	return &Tokener_ValidateRefreshTokenAndGetUserID_Call{Call: _e.mock.On("ValidateRefreshTokenAndGetUserID", tokenString)}
}

func (_c *Tokener_ValidateRefreshTokenAndGetUserID_Call) Run(run func(tokenString string)) *Tokener_ValidateRefreshTokenAndGetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Tokener_ValidateRefreshTokenAndGetUserID_Call) Return(_a0 int64, _a1 error) *Tokener_ValidateRefreshTokenAndGetUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTokener interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokener creates a new instance of Tokener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokener(t mockConstructorTestingTNewTokener) *Tokener {
	mock := &Tokener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
