// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	google "github.com/clubrizer/services/users/internal/authenticator/google"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/clubrizer/services/users/internal/storage"
)

// UserRepository is an autogenerated mock type for the userRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: user, isAdmin
func (_m *UserRepository) Create(user *google.User, isAdmin bool) (*storage.User, error) {
	ret := _m.Called(user, isAdmin)

	var r0 *storage.User
	if rf, ok := ret.Get(0).(func(*google.User, bool) *storage.User); ok {
		r0 = rf(user, isAdmin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*google.User, bool) error); ok {
		r1 = rf(user, isAdmin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user *google.User
//   - isAdmin bool
func (_e *UserRepository_Expecter) Create(user interface{}, isAdmin interface{}) *UserRepository_Create_Call {
	return &UserRepository_Create_Call{Call: _e.mock.On("Create", user, isAdmin)}
}

func (_c *UserRepository_Create_Call) Run(run func(user *google.User, isAdmin bool)) *UserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*google.User), args[1].(bool))
	})
	return _c
}

func (_c *UserRepository_Create_Call) Return(_a0 *storage.User, _a1 error) *UserRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetFromExternalId provides a mock function with given fields: issuer, externalId
func (_m *UserRepository) GetFromExternalId(issuer string, externalId string) (*storage.User, error) {
	ret := _m.Called(issuer, externalId)

	var r0 *storage.User
	if rf, ok := ret.Get(0).(func(string, string) *storage.User); ok {
		r0 = rf(issuer, externalId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(issuer, externalId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetFromExternalId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFromExternalId'
type UserRepository_GetFromExternalId_Call struct {
	*mock.Call
}

// GetFromExternalId is a helper method to define mock.On call
//   - issuer string
//   - externalId string
func (_e *UserRepository_Expecter) GetFromExternalId(issuer interface{}, externalId interface{}) *UserRepository_GetFromExternalId_Call {
	return &UserRepository_GetFromExternalId_Call{Call: _e.mock.On("GetFromExternalId", issuer, externalId)}
}

func (_c *UserRepository_GetFromExternalId_Call) Run(run func(issuer string, externalId string)) *UserRepository_GetFromExternalId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetFromExternalId_Call) Return(_a0 *storage.User, _a1 error) *UserRepository_GetFromExternalId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetFromId provides a mock function with given fields: id
func (_m *UserRepository) GetFromId(id int64) (*storage.User, error) {
	ret := _m.Called(id)

	var r0 *storage.User
	if rf, ok := ret.Get(0).(func(int64) *storage.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetFromId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFromId'
type UserRepository_GetFromId_Call struct {
	*mock.Call
}

// GetFromId is a helper method to define mock.On call
//   - id int64
func (_e *UserRepository_Expecter) GetFromId(id interface{}) *UserRepository_GetFromId_Call {
	return &UserRepository_GetFromId_Call{Call: _e.mock.On("GetFromId", id)}
}

func (_c *UserRepository_GetFromId_Call) Run(run func(id int64)) *UserRepository_GetFromId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *UserRepository_GetFromId_Call) Return(_a0 *storage.User, _a1 error) *UserRepository_GetFromId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
